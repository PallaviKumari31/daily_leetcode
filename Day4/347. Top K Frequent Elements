Question 347:

Level:hard
Topic:Linked List
Code:

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> ans;
        unordered_map<int,int> m;
        for(auto a: nums){
            m[a]++;
        }
        priority_queue<pair<int,int> ,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        for(auto b:m){
            pq.emplace(b.second,b.first);
        //   pq.push(make_pair(b.second, b.first)); push() requires an already-constructed pair emplace() directly constructs the object in-place, which is faster and avoids an extra copy.
        if(pq.size()>k)
        pq.pop();
        }
        while(!pq.empty()){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }

};
